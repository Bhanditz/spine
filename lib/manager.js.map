{
  "version": 3,
  "file": "manager.js",
  "sourceRoot": "..",
  "sources": [
    "src/manager.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "Spine = @Spine or require('spine')\n$     = Spine.$\n\n\nclass Spine.Manager extends Spine.Module\n  @include Spine.Events\n\n  constructor: ->\n    super()\n    @controllers = []\n    @bind 'change', @change\n    @add(arguments...)\n\n  add: (controllers...) ->\n    @addOne(cont) for cont in controllers\n\n  addOne: (controller) ->\n    controller.bind 'active', (args...) =>\n      @trigger('change', controller, args...)\n    controller.bind 'release', =>\n      @controllers = (c for c in @controllers when c isnt controller)\n\n    @controllers.push(controller)\n\n  deactivate: ->\n    @trigger('change', false, arguments...)\n\n  # Private\n\n  change: (current, args...) ->\n    for cont in @controllers when cont isnt current\n      cont.deactivate(args...)\n\n    current.activate(args...) if current\n\n\nSpine.Controller.include\n  active: (args...) ->\n    if typeof args[0] is 'function'\n      @bind('active', args[0])\n    else\n      args.unshift('active')\n      @trigger(args...)\n    @\n\n  isActive: ->\n    @el.hasClass('active')\n\n  activate: ->\n    @el.addClass('active')\n    this\n\n  deactivate: ->\n    @el.removeClass('active')\n    this\n\n\nclass Spine.Stack extends Spine.Controller\n  controllers: {}\n  routes: {}\n\n  className: 'spine stack'\n\n  constructor: ->\n    super()\n\n    @manager = new Spine.Manager\n    @router  = Spine.Route?.create()\n\n    for key, value of @controllers\n      throw Error \"'@#{ key }' already assigned\" if @[key]?\n      @[key] = new value(stack: this)\n      @add(@[key])\n\n    for key, value of @routes\n      do (key, value) =>\n        callback = value if typeof value is 'function'\n        callback or= => @[value].active(arguments...)\n        @route(key, callback)\n\n    @[@default].active() if @default\n\n  add: (controller) ->\n    @manager.add(controller)\n    @append(controller)\n\n  release: =>\n    @router?.destroy()\n    super()\n\n\nmodule?.exports       = Spine.Manager\nmodule?.exports.Stack = Spine.Stack\n"
  ]
}