{
  "version": 3,
  "file": "spine.js",
  "sourceRoot": "..",
  "sources": [
    "src/spine.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\nSpine.js MVC library\nReleased under the MIT License\n###\n\nEvents =\n  bind: (ev, callback) ->\n    evs   = ev.split(' ')\n    @_callbacks or= {} unless @hasOwnProperty('_callbacks')\n    for name in evs\n      @_callbacks[name] or= []\n      @_callbacks[name].push(callback)\n    this\n\n  one: (ev, callback) ->\n    @bind ev, handler = ->\n      @unbind(ev, handler)\n      callback.apply(this, arguments)\n\n  trigger: (args...) ->\n    ev   = args.shift()\n    list = @_callbacks?[ev]\n    return unless list\n    for callback in list\n      break if callback.apply(this, args) is false\n    true\n\n  listenTo: (obj, ev, callback) ->\n    obj.bind(ev, callback)\n    @listeningTo or= []\n    @listeningTo.push {obj, ev, callback}\n    this\n\n  listenToOnce: (obj, ev, callback) ->\n    listeningToOnce = @listeningToOnce or= []\n    obj.bind ev, handler = ->\n      idx = -1\n      for lt, i in listeningToOnce when lt.obj is obj\n        idx = i if lt.ev is ev and lt.callback is handler\n      obj.unbind(ev, handler)\n      listeningToOnce.splice(idx, 1) unless idx is -1\n      callback.apply(this, arguments)\n    listeningToOnce.push {obj, ev, callback: handler}\n    this\n\n  stopListening: (obj, events, callback) ->\n    if arguments.length is 0\n      for listeningTo in [@listeningTo, @listeningToOnce]\n        continue unless listeningTo?.length\n        for lt in listeningTo\n          lt.obj.unbind(lt.ev, lt.callback)\n      @listeningTo = undefined\n      @listeningToOnce = undefined\n\n    else if obj\n      events = if events then events.split(' ') else [undefined]\n      for listeningTo in [@listeningTo, @listeningToOnce]\n        continue unless listeningTo\n        for ev in events\n          for idx in [listeningTo.length-1..0]\n            lt = listeningTo[idx]\n            continue unless lt.obj is obj\n            continue if callback and lt.callback isnt callback\n            if (not ev) or (ev is lt.ev)\n              lt.obj.unbind(lt.ev, lt.callback)\n              listeningTo.splice(idx, 1) unless idx is -1\n            else if ev\n              evts = lt.ev.split(' ')\n              if ev in evts\n                evts = (e for e in evts when e isnt ev)\n                lt.ev = $.trim(evts.join(' '))\n                lt.obj.unbind(ev, lt.callback)\n    this\n\n  unbind: (ev, callback) ->\n    if arguments.length is 0\n      @_callbacks = {}\n      return this\n    return this unless ev\n    evs = ev.split(' ')\n    for name in evs\n      list = @_callbacks?[name]\n      continue unless list\n      unless callback\n        delete @_callbacks[name]\n        continue\n      for cb, i in list when (cb is callback)\n        list = list.slice()\n        list.splice(i, 1)\n        @_callbacks[name] = list\n        break\n    this\n\nEvents.on  = Events.bind\nEvents.off = Events.unbind\n\nLog =\n  trace: true\n\n  logPrefix: '(App)'\n\n  log: (args...) ->\n    return unless @trace\n    if @logPrefix then args.unshift(@logPrefix)\n    console?.log?(args...)\n    this\n\nmoduleKeywords = ['included', 'extended']\n\nclass Module\n  @include: (obj) ->\n    throw new Error('include(obj) requires obj') unless obj\n    for key, value of obj when key not in moduleKeywords\n      @::[key] = value\n    obj.included?.apply(this)\n    this\n\n  @extend: (obj) ->\n    throw new Error('extend(obj) requires obj') unless obj\n    for key, value of obj when key not in moduleKeywords\n      @[key] = value\n    obj.extended?.apply(this)\n    this\n\n  @proxy: (func) ->\n    => func.apply(this, arguments)\n\n  proxy: (func) ->\n    => func.apply(this, arguments)\n\n  constructor: ->\n    @init?(arguments...)\n\nclass Model extends Module\n  @extend Events\n  @include Events\n\n  @records    : []\n  @irecords   : {}\n  @attributes : []\n\n  @configure: (name, attributes...) ->\n    @className = name\n    @deleteAll()\n    @attributes = attributes if attributes.length\n    @attributes and= makeArray(@attributes)\n    @attributes or=  []\n    @unbind()\n    this\n\n  @toString: -> \"#{@className}(#{@attributes.join(\", \")})\"\n\n  @find: (id, notFound = @notFound) ->\n    @irecords[id]?.clone() or notFound?(id)\n\n  @findAll: (ids, notFound) ->\n    (@find(id) for id in ids when @find(id, notFound))\n\n  @notFound: (id) -> null\n\n  @exists: (id) -> Boolean @irecords[id]\n\n  @addRecord: (record,idx) ->\n    if root = @irecords[record.id or record.cid]\n      root.refresh(record)\n    else\n      record.id or= record.cid\n      @irecords[record.id] = @irecords[record.cid] = record\n      if idx isnt undefined\n        @records.splice(idx,0,record)\n      else\n        @records.push(record)\n    record\n\n  @refresh: (values, options = {}) ->\n    @deleteAll() if options.clear\n    records = @fromJSON(values)\n    records = [records] unless Array.isArray(records)\n    @addRecord(record) for record in records\n    @sort()\n\n    result = @cloneArray(records)\n    @trigger('refresh', result, options)\n    result\n\n  @select: (callback) ->\n    (record.clone() for record in @records when callback(record))\n\n  @findByAttribute: (name, value) ->\n    for record in @records\n      if record[name] is value\n        return record.clone()\n    null\n\n  @findAllByAttribute: (name, value) ->\n    @select (item) ->\n      item[name] is value\n\n  @each: (callback) ->\n    callback(record.clone()) for record in @records\n\n  @all: ->\n    @cloneArray(@records)\n\n  @slice: (begin = 0, end)->\n    @cloneArray(@records.slice(begin, end))\n\n  @first: (end = 1)->\n    if end > 1\n      @cloneArray(@records.slice(0, end))\n    else\n      @records[0]?.clone()\n\n  @last: (begin)->\n    if typeof begin is 'number'\n      @cloneArray(@records.slice(-begin))\n    else\n      @records[@records.length - 1]?.clone()\n\n  @count: ->\n    @records.length\n\n  @deleteAll: ->\n    @records  = []\n    @irecords = {}\n\n  @destroyAll: (options) ->\n    record.destroy(options) for record in @records\n\n  @update: (id, atts, options) ->\n    @find(id).updateAttributes(atts, options)\n\n  @create: (atts, options) ->\n    record = new @(atts)\n    record.save(options)\n\n  @destroy: (id, options) ->\n    @find(id)?.destroy(options)\n\n  @change: (callbackOrParams) ->\n    if typeof callbackOrParams is 'function'\n      @bind('change', callbackOrParams)\n    else\n      @trigger('change', arguments...)\n\n  @fetch: (callbackOrParams) ->\n    if typeof callbackOrParams is 'function'\n      @bind('fetch', callbackOrParams)\n    else\n      @trigger('fetch', arguments...)\n\n  @toJSON: ->\n    @records\n\n  @beforeFromJSON: (objects) -> objects\n\n  @fromJSON: (objects) ->\n    return unless objects\n    if typeof objects is 'string'\n      objects = JSON.parse(objects)\n    objects = @beforeFromJSON(objects)\n    if Array.isArray(objects)\n      for value in objects\n        if value instanceof this\n          value\n        else\n          new @(value)\n    else\n      return objects if objects instanceof this\n      new @(objects)\n\n  @fromForm: ->\n    (new this).fromForm(arguments...)\n\n  @sort: ->\n    if @comparator\n      @records.sort @comparator\n    this\n\n  # Private\n\n  @cloneArray: (array) ->\n    (value.clone() for value in array)\n\n  @idCounter: 0\n\n  @uid: (prefix = '') ->\n    uid = prefix + @idCounter++\n    uid = @uid(prefix) if @exists(uid)\n    uid\n\n  # Instance\n\n  constructor: (atts) ->\n    super()\n    if @constructor.uuid? and typeof @constructor.uuid is 'function'\n      @cid = @constructor.uuid()\n      @id  = @cid unless @id\n    else\n      @cid = atts?.cid or @constructor.uid('c-')\n    @load atts if atts\n\n  isNew: ->\n    not @exists()\n\n  isValid: ->\n    not @validate()\n\n  validate: ->\n\n  load: (atts) ->\n    if atts.id then @id = atts.id\n    for key, value of atts\n      continue if key is '_callbacks'\n      if typeof @[key] is 'function'\n        continue if typeof value is 'function'\n        @[key](value)\n      else\n        @[key] = value\n    this\n\n  attributes: ->\n    result = {}\n    for key in @constructor.attributes when key of this\n      if typeof @[key] is 'function'\n        result[key] = @[key]()\n      else\n        result[key] = @[key]\n    result.id = @id if @id\n    result\n\n  eql: (rec) ->\n    rec and rec.constructor is @constructor and\n      ((rec.cid is @cid) or (rec.id and rec.id is @id))\n\n  save: (options = {}) ->\n    unless options.validate is false\n      error = @validate()\n      if error\n        @trigger('error', this, error)\n        return false\n\n    @trigger('beforeSave', this, options)\n    record = if @isNew() then @create(options) else @update(options)\n    @stripCloneAttrs()\n    @trigger('save', record, options)\n    record\n\n  stripCloneAttrs: ->\n    return if @hasOwnProperty 'cid' # Make sure it's not the raw object\n    for own key, value of this\n      delete @[key] if key in @constructor.attributes\n    this\n\n  updateAttribute: (name, value, options) ->\n    atts = {}\n    atts[name] = value\n    @updateAttributes(atts, options)\n\n  updateAttributes: (atts, options) ->\n    @load(atts)\n    @save(options)\n\n  changeID: (id) ->\n    return if id is @id\n    records = @constructor.irecords\n    records[id] = records[@id]\n    delete records[@id] unless @cid is @id\n    @id = id\n    #@save()\n\n  remove: (options = {}) ->\n    # Remove record from model\n    records = @constructor.records.slice(0)\n    for record, i in records when @eql(record)\n      records.splice(i, 1)\n      break\n    @constructor.records = records\n    if options.clear\n      # Remove the ID and CID indexes\n      delete @constructor.irecords[@id]\n      delete @constructor.irecords[@cid]\n\n  destroy: (options = {}) ->\n    options.clear ?= true\n    @trigger('beforeDestroy', this, options)\n    @remove(options)\n    @destroyed = true\n    # handle events\n    @trigger('destroy', this, options)\n    @trigger('change', this, 'destroy', options)\n    @stopListening() if @listeningTo\n    @unbind()\n    this\n\n  dup: (newRecord = true) ->\n    atts = @attributes()\n    if newRecord\n      delete atts.id\n    else\n      atts.cid = @cid\n    record = new @constructor(atts)\n    @_callbacks and record._callbacks = @_callbacks unless newRecord\n    record\n\n  clone: ->\n    createObject(this)\n\n  reload: ->\n    return this if @isNew()\n    original = @constructor.find(@id)\n    @load(original.attributes())\n    original\n\n  refresh: (atts) ->\n    atts = @constructor.fromJSON(atts)\n    # ID change, need to do some shifting\n    if atts.id and @id isnt atts.id\n      @changeID(atts.id)\n    # go to the source and load attributes\n    @constructor.irecords[@id].load(atts)\n    @trigger('refresh', this)\n    @trigger('change', this, 'refresh')\n    this\n\n  toJSON: ->\n    @attributes()\n\n  toString: ->\n    \"<#{@constructor.className} (#{JSON.stringify(this)})>\"\n\n  fromForm: (form) ->\n    result = {}\n\n    for checkbox in $(form).find('[type=checkbox]:not([value])')\n      result[checkbox.name] = $(checkbox).prop('checked')\n\n    for checkbox in $(form).find('[type=checkbox][name$=\"[]\"]')\n      name = checkbox.name.replace(/\\[\\]$/, '')\n      result[name] or= []\n      result[name].push checkbox.value if $(checkbox).prop('checked')\n\n    for key in $(form).serializeArray()\n      result[key.name] or= key.value\n\n    @load(result)\n\n  exists: ->\n    @constructor.exists(@id)\n\n  # Private\n\n  update: (options) ->\n    @trigger('beforeUpdate', this, options)\n\n    records = @constructor.irecords\n    records[@id].load @attributes()\n\n    @constructor.sort()\n\n    clone = records[@id].clone()\n    clone.trigger('update', clone, options)\n    clone.trigger('change', clone, 'update', options)\n    clone\n\n  create: (options) ->\n    @trigger('beforeCreate', this, options)\n    @id or= @cid\n\n    record = @dup(false)\n    @constructor.addRecord(record,options.idx)\n    @constructor.sort()\n\n    clone = record.clone()\n    clone.trigger('create', clone, options)\n    clone.trigger('change', clone, 'create', options)\n    clone\n\n  bind: ->\n    record = @constructor.irecords[@id] or this\n    Events.bind.apply record, arguments\n\n  one: ->\n    record = @constructor.irecords[@id] or this\n    Events.one.apply record, arguments\n\n  unbind: ->\n    record = @constructor.irecords[@id] or this\n    Events.unbind.apply record, arguments\n\n  trigger: ->\n    Events.trigger.apply this, arguments # Trigger the instance event.\n    # Don't trigger 'refresh' multiple times on the class - the class method\n    # will trigger it once for the whole refresh operation.\n    return true if arguments[0] is 'refresh'\n    @constructor.trigger arguments... # Trigger the class event.\n\nModel::on  = Model::bind\nModel::off = Model::unbind\n\n\nclass Controller extends Module\n  @include Events\n  @include Log\n\n  eventSplitter: /^(\\S+)\\s*(.*)$/\n  tag: 'div'\n\n  constructor: (options) ->\n    super()\n    @options = options\n\n    for key, value of @options\n      @[key] = value\n\n    @el = document.createElement(@tag) unless @el\n    @el = $(@el)\n\n    @el.addClass(@className) if @className\n    @el.attr(@attributes) if @attributes\n\n    @events = @constructor.events unless @events\n    @elements = @constructor.elements unless @elements\n\n    context = @\n    while parent_prototype = context.constructor.__super__\n      @events = $.extend({}, parent_prototype.events, @events) if parent_prototype.events\n      @elements = $.extend({}, parent_prototype.elements, @elements) if parent_prototype.elements\n      context = parent_prototype\n\n    @delegateEvents(@events) if @events\n    @refreshElements() if @elements\n\n\n  release: =>\n    @trigger 'release', this\n    # no need to unDelegateEvents since remove will end up handling that\n    @el.remove()\n    @unbind()\n    @stopListening()\n\n  $: (selector) -> @el.find(selector)\n\n  delegateEvents: (events) ->\n    for key, method of events\n\n      if typeof(method) is 'function'\n        # Always return true from event handlers\n        method = do (method) => =>\n          method.apply(this, arguments)\n          true\n      else\n        unless @[method]\n          throw new Error(\"#{method} doesn't exist\")\n\n        method = do (method) => =>\n          @[method].apply(this, arguments)\n          true\n\n      match      = key.match(@eventSplitter)\n      eventName  = match[1]\n      selector   = match[2]\n\n      if selector is ''\n        @el.bind(eventName, method)\n      else\n        @el.on(eventName, selector, method)\n\n  refreshElements: ->\n    for key, value of @elements\n      @[value] = @$(key)\n\n  delay: (func, timeout) ->\n    setTimeout(@proxy(func), timeout || 0)\n\n  # keep controllers elements obj in sync with it contents\n\n  html: (element) ->\n    @el.html(element.el or element)\n    @refreshElements()\n    @el\n\n  append: (elements...) ->\n    elements = (e.el or e for e in elements)\n    @el.append(elements...)\n    @refreshElements()\n    @el\n\n  appendTo: (element) ->\n    @el.appendTo(element.el or element)\n    @refreshElements()\n    @el\n\n  prepend: (elements...) ->\n    elements = (e.el or e for e in elements)\n    @el.prepend(elements...)\n    @refreshElements()\n    @el\n\n  replace: (element) ->\n    element = element.el or element\n    element = $.trim(element) if typeof element is \"string\"\n    # parseHTML is incompatible with Zepto\n    [previous, @el] = [@el, $($.parseHTML(element)?[0] or element)]\n    previous.replaceWith(@el)\n    @delegateEvents(@events)\n    @refreshElements()\n    @el\n\n# Utilities & Shims\n\n$ = window?.jQuery or window?.Zepto or (element) -> element\n\ncreateObject = Object.create or (o) ->\n  Func = ->\n  Func.prototype = o\n  new Func()\n\nmakeArray = (args) ->\n  Array::slice.call(args, 0)\n\n# Globals\n\nSpine = @Spine   = {}\nmodule?.exports  = Spine\n\nSpine.version    = '1.6.2'\nSpine.$          = $\nSpine.Events     = Events\nSpine.Log        = Log\nSpine.Module     = Module\nSpine.Controller = Controller\nSpine.Model      = Model\n\n# Global events\n\nModule.extend.call(Spine, Events)\n\n# JavaScript compatability\n\nModule.create = Module.sub =\n  Controller.create = Controller.sub =\n    Model.sub = (instances, statics) ->\n      class Result extends this\n      Result.include(instances) if instances\n      Result.extend(statics) if statics\n      Result.unbind?()\n      Result\n\nModel.setup = (name, attributes = []) ->\n  class Instance extends this\n  Instance.configure(name, attributes...)\n  Instance\n\nSpine.Class = Module\n"
  ]
}