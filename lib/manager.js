// Generated by CoffeeScript 2.3.1
(function() {
  var $, Spine, ref,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  Spine = this.Spine || require('spine');

  $ = Spine.$;

  Spine.Manager = (function() {
    class Manager extends Spine.Module {
      constructor() {
        super();
        this.controllers = [];
        this.bind('change', this.change);
        this.add(...arguments);
      }

      add(...controllers) {
        var cont, i, len, results;
        results = [];
        for (i = 0, len = controllers.length; i < len; i++) {
          cont = controllers[i];
          results.push(this.addOne(cont));
        }
        return results;
      }

      addOne(controller) {
        controller.bind('active', (...args) => {
          return this.trigger('change', controller, ...args);
        });
        controller.bind('release', () => {
          var c;
          return this.controllers = (function() {
            var i, len, ref, results;
            ref = this.controllers;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              c = ref[i];
              if (c !== controller) {
                results.push(c);
              }
            }
            return results;
          }).call(this);
        });
        return this.controllers.push(controller);
      }

      deactivate() {
        return this.trigger('change', false, ...arguments);
      }

      // Private
      change(current, ...args) {
        var cont, i, len, ref;
        ref = this.controllers;
        for (i = 0, len = ref.length; i < len; i++) {
          cont = ref[i];
          if (cont !== current) {
            cont.deactivate(...args);
          }
        }
        if (current) {
          return current.activate(...args);
        }
      }

    };

    Manager.include(Spine.Events);

    return Manager;

  }).call(this);

  Spine.Controller.include({
    active: function(...args) {
      if (typeof args[0] === 'function') {
        this.bind('active', args[0]);
      } else {
        args.unshift('active');
        this.trigger(...args);
      }
      return this;
    },
    isActive: function() {
      return this.el.hasClass('active');
    },
    activate: function() {
      this.el.addClass('active');
      return this;
    },
    deactivate: function() {
      this.el.removeClass('active');
      return this;
    }
  });

  ref = Spine.Stack = (function() {
    class Stack extends Spine.Controller {
      constructor() {
        var key, ref1, ref2, ref3, value;
        super();
        this.release = this.release.bind(this);
        this.manager = new Spine.Manager;
        this.router = (ref1 = Spine.Route) != null ? ref1.create() : void 0;
        ref2 = this.controllers;
        for (key in ref2) {
          value = ref2[key];
          if (this[key] != null) {
            throw Error(`'@${key}' already assigned`);
          }
          this[key] = new value({
            stack: this
          });
          this.add(this[key]);
        }
        ref3 = this.routes;
        for (key in ref3) {
          value = ref3[key];
          ((key, value) => {
            var callback;
            if (typeof value === 'function') {
              callback = value;
            }
            callback || (callback = () => {
              return this[value].active(...arguments);
            });
            return this.route(key, callback);
          })(key, value);
        }
        if (this.default) {
          this[this.default].active();
        }
      }

      add(controller) {
        this.manager.add(controller);
        return this.append(controller);
      }

      release() {
        var ref1;
        boundMethodCheck(this, ref);
        if ((ref1 = this.router) != null) {
          ref1.destroy();
        }
        return super.release();
      }

    };

    Stack.prototype.controllers = {};

    Stack.prototype.routes = {};

    Stack.prototype.className = 'spine stack';

    return Stack;

  }).call(this);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Spine.Manager;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports.Stack = Spine.Stack;
  }

}).call(this);

//# sourceMappingURL=manager.js.map
