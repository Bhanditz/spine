{
  "version": 3,
  "file": "relation.js",
  "sourceRoot": "..",
  "sources": [
    "src/relation.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "Spine   = @Spine or require('spine')\n\nclass Collection extends Spine.Module\n  constructor: (options = {}) ->\n    super()\n    for key, value of options\n      @[key] = value\n\n  all: ->\n    @model.select (rec) => @associated(rec)\n\n  first: ->\n    @all()[0]\n\n  last: ->\n    values = @all()\n    values[values.length - 1]\n\n  count: ->\n    @all().length\n\n  find: (id, notFound = @model.notFound) ->\n    records = @select (rec) =>\n      \"#{rec.id}\" is \"#{id}\"\n    return records[0] or notFound?(id)\n\n  findAllByAttribute: (name, value) ->\n    @model.select (rec) =>\n      @associated(rec) and rec[name] is value\n\n  findByAttribute: (name, value) ->\n    @findAllByAttribute(name, value)[0]\n\n  select: (cb) ->\n    @model.select (rec) =>\n      @associated(rec) and cb(rec)\n\n  refresh: (values) ->\n    return this unless values?\n    for record in @all()\n      delete @model.irecords[record.id]\n      for match, i in @model.records when match.id is record.id\n        @model.records.splice(i, 1)\n        break\n    values = [values] unless Array.isArray(values)\n    for record in values\n      record.newRecord = false\n      record[@fkey] = @record.id\n    @model.refresh values\n    this\n\n  create: (record, options) ->\n    record[@fkey] = @record.id\n    @model.create(record, options)\n\n  add: (record, options) ->\n    record.updateAttribute @fkey, @record.id, options\n\n  remove: (record, options) ->\n    record.updateAttribute @fkey, null, options\n\n  # Private\n\n  associated: (record) ->\n    record[@fkey] is @record.id\n\nclass Instance extends Spine.Module\n  constructor: (options = {}) ->\n    super()\n    for key, value of options\n      @[key] = value\n\n  find: ->\n    @model.find(@record[@fkey])\n\n  update: (value) ->\n    return this unless value?\n    unless value instanceof @model\n      value = new @model(value)\n    value.save() if value.isNew()\n    @record[@fkey] = value and value.id\n    this\n\nclass Singleton extends Spine.Module\n  constructor: (options = {}) ->\n    super()\n    for key, value of options\n      @[key] = value\n\n  find: ->\n    @record.id and @model.findByAttribute(@fkey, @record.id)\n\n  update: (value) ->\n    return this unless value?\n    unless value instanceof @model\n      value = @model.fromJSON(value)\n\n    value[@fkey] = @record.id\n    value.save()\n    this\n\nsingularize = (str) ->\n  str.replace(/s$/, '')\n\nunderscore = (str) ->\n  str.replace(/::/g, '/')\n     .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\n     .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n     .replace(/(-|\\.)/g, '_')\n     .toLowerCase()\n\nrequireModel = (model) ->\n  if typeof model is 'string'\n    require?(model) or eval(model)\n  else\n    model\n\nassociation = (name, model, record, fkey, Ctor) ->\n  model = requireModel(model) if typeof model is 'string'\n  new Ctor(name: name, model: model, record: record, fkey: fkey)\n\nSpine.Model.extend\n  hasMany: (name, model, fkey) ->\n    fkey ?= \"#{underscore(this.className)}_id\"\n    @::[name] = (value) ->\n      association(name, model, @, fkey, Collection).refresh(value)\n\n  belongsTo: (name, model, fkey) ->\n    fkey ?= \"#{underscore(singularize(name))}_id\"\n    @::[name] = (value) ->\n      association(name, model, @, fkey, Instance).update(value).find()\n    @attributes.push(fkey)\n\n  hasOne: (name, model, fkey) ->\n    fkey ?= \"#{underscore(@className)}_id\"\n    @::[name] = (value) ->\n      association(name, model, @, fkey, Singleton).update(value).find()\n\nSpine.Collection = Collection\nSpine.Singleton = Singleton\nSpine.Instance = Instance\n"
  ]
}