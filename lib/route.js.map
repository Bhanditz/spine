{
  "version": 3,
  "file": "route.js",
  "sourceRoot": "..",
  "sources": [
    "src/route.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "Spine = @Spine or require('spine')\n$     = Spine.$\n\nhashStrip    = /^#*/\nnamedParam   = /:([\\w\\d]+)/g\nsplatParam   = /\\*([\\w\\d]+)/g\nescapeRegExp = /[-[\\]{}()+?.,\\\\^$|#\\s]/g\n\n\nclass Path extends Spine.Module\n\n  constructor: (path, callback) ->\n    super()\n    @names = []\n    @path = path\n    @callback = callback\n    if typeof path is 'string'\n      namedParam.lastIndex = 0\n      while (match = namedParam.exec(path)) != null\n        @names.push(match[1])\n\n      splatParam.lastIndex = 0\n      while (match = splatParam.exec(path)) != null\n        @names.push(match[1])\n\n      path = path.replace(escapeRegExp, '\\\\$&')\n                 .replace(namedParam, '([^\\/]*)')\n                 .replace(splatParam, '(.*?)')\n\n      @route = new RegExp(\"^#{path}$\")\n    else\n      @route = path\n\n  match: (path, options = {}) ->\n    return false unless match = @route.exec(path)\n    options.match = match\n    params = match.slice(1)\n\n    if @names.length\n      for param, i in params\n        options[@names[i]] = param\n\n    Route.trigger('before', this)\n    @callback.call(null, options) isnt false\n\n\nclass Route extends Spine.Module\n  @extend Spine.Events\n\n  @historySupport: window.history?.pushState?\n\n  @options:\n    trigger: true\n    history: false\n    shim: false\n    replace: false\n    redirect: false\n\n  @routers: []\n\n  @setup: (options = {}) ->\n    @options = $.extend({}, @options, options)\n\n    if @options.history\n      @history = @historySupport and @options.history\n\n    return if @options.shim\n\n    if @history\n      $(window).bind('popstate', @change)\n    else\n      $(window).bind('hashchange', @change)\n    @change()\n\n  @unbind: ->\n    unbindResult = Spine.Events.unbind.apply this, arguments\n    return unbindResult if arguments.length > 0\n\n    return if @options.shim\n\n    if @history\n      $(window).unbind('popstate', @change)\n    else\n      $(window).unbind('hashchange', @change)\n\n  @navigate: (args...) ->\n    options = {}\n    lastArg = args[args.length - 1]\n    if typeof lastArg is 'object'\n      options = args.pop()\n    else if typeof lastArg is 'boolean'\n      options.trigger = args.pop()\n    options = $.extend({}, @options, options)\n\n    path = args.join('/')\n    return if @path is path\n    @path = path\n\n    if options.trigger\n      @trigger('navigate', @path)\n      routes = @matchRoutes(@path, options)\n      unless routes.length\n        if typeof options.redirect is 'function'\n          return options.redirect.apply this, [@path, options]\n        else\n          if options.redirect is true\n            @redirect(@path)\n\n    if options.shim\n      true\n    else if @history and options.replace\n      history.replaceState({}, document.title, @path)\n    else if @history\n      history.pushState({}, document.title, @path)\n    else\n      window.location.hash = @path\n\n  @create: ->\n    router = new this\n    @routers.push router\n    router\n\n  @add: (path, callback) ->\n    #@router ?= new this\n    @router.add path, callback\n\n  add: (path, callback) ->\n    if typeof path is 'object' and path not instanceof RegExp\n      @add(key, value) for key, value of path\n    else\n      @routes.push(new Path(path, callback))\n\n  destroy: ->\n    @routes.length = 0\n    @constructor.routers = (r for r in @constructor.routers when r isnt this)\n\n  # Private\n\n  @getPath: ->\n    if @history\n      path = window.location.pathname\n      path = '/' + path if path.substr(0,1) isnt '/'\n    else\n      path = window.location.hash\n      path = path.replace(hashStrip, '')\n    path\n\n  @getHost: ->\n    \"#{window.location.protocol}//#{window.location.host}\"\n\n  @change: =>\n    path = @getPath()\n    return if path is @path\n    @path = path\n    @matchRoutes(@path)\n\n  @matchRoutes: (path, options)->\n    matches = []\n    for router in @routers.concat [@router]\n      match = router.matchRoute path, options\n      matches.push match if match\n    @trigger('change', matches, path) if matches.length\n    matches\n\n  @redirect: (path) ->\n    window.location = path\n\n  constructor: ->\n    super()\n    @routes = []\n\n  matchRoute: (path, options) ->\n    for route in @routes when route.match(path, options)\n      return route\n\n  trigger: (args...) ->\n    args.splice(1, 0, this)\n    @constructor.trigger(args...)\n\nRoute.router = new Route\n\n\nSpine.Controller.include\n  route: (path, callback) ->\n    if @router instanceof Spine.Route\n      @router.add(path, @proxy(callback))\n    else\n      Spine.Route.add(path, @proxy(callback))\n\n  routes: (routes) ->\n    @route(key, value) for key, value of routes\n\n  navigate: ->\n    Spine.Route.navigate.apply(Spine.Route, arguments)\n\nRoute.Path      = Path\nSpine.Route     = Route\nmodule?.exports = Route\n"
  ]
}