// Generated by CoffeeScript 2.3.1
(function() {
  var $, Spine, ref,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  Spine = this.Spine || require('spine');

  $ = Spine.$;

  ref = Spine.List = (function() {
    class List extends Spine.Controller {
      constructor() {
        super();
        this.change = this.change.bind(this);
        this.bind('change', this.change);
      }

      template() {
        throw Error('Override template');
      }

      change(item) {
        var i, idx, index, len, ref1;
        boundMethodCheck(this, ref);
        this.current = item;
        if (!this.current) {
          this.children().removeClass('active');
          return;
        }
        this.children().removeClass('active');
        ref1 = this.items;
        for (idx = i = 0, len = ref1.length; i < len; idx = ++i) {
          item = ref1[idx];
          if (!(item === this.current)) {
            continue;
          }
          index = idx;
          break;
        }
        return $(this.children().get(index)).addClass('active');
      }

      render(items) {
        if (items) {
          this.items = items;
        }
        this.html(this.template(this.items));
        this.change(this.current);
        if (this.selectFirst) {
          if (!this.children('.active').length) {
            return this.children(':first').click();
          }
        }
      }

      children(sel) {
        return this.el.children(sel);
      }

      click(e) {
        var item;
        item = this.items[$(e.currentTarget).index()];
        this.trigger('change', item);
        return true;
      }

    };

    List.prototype.events = {
      'click .item': 'click'
    };

    List.prototype.selectFirst = false;

    return List;

  }).call(this);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Spine.List;
  }

}).call(this);

//# sourceMappingURL=list.js.map
